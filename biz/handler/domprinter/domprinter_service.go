// Code generated by hertz generator.

package domprinter

import (
	"context"
	"time"

	domprinter "github.com/Dup4/domprinter/biz/model/domprinter"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/Dup4/domprinter/biz/constants"
	"github.com/Dup4/domprinter/biz/model/orm_gen"
	"github.com/Dup4/domprinter/biz/model/query"
)

// FetchPrintTask .
// @router /print-task [GET]
func FetchPrintTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req domprinter.FetchPrintTaskReq

	resp := domprinter.NewFetchPrintTaskResp()
	resp.BaseResp = domprinter.NewBaseResp()
	bResp := resp.BaseResp

	err = c.BindAndValidate(&req)
	if err != nil {
		bResp.RespCode = domprinter.RespCodeEnum_ParamInvalid
		bResp.RespMessage = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	limit := 16
	if req.IsSetLimitTaskNum() {
		limit = int(*req.LimitTaskNum)
	}

	p := query.PrintTask
	b := p.
		WithContext(ctx).
		Where(p.State.Eq(req.TaskState.String())).
		Order(p.ID).
		Limit(limit)

	if req.IsSetOffsetTaskID() {
		b = b.Offset(int(*req.OffsetTaskID))
	}

	tasks, err := b.Find()
	if err != nil {
		bResp.RespCode = domprinter.RespCodeEnum_DBErr
		bResp.RespMessage = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
	}

	resp.PrintTaskList = make([]*domprinter.PrintTaskDTO, 0, len(tasks))
	for _, task := range tasks {
		state, _ := domprinter.TaskStateEnumFromString(task.State)

		resp.PrintTaskList = append(resp.PrintTaskList, &domprinter.PrintTaskDTO{
			SubmitTime:  task.SubmitTime.Format(constants.ISO8601TimeFormat),
			UserName:    task.UserName,
			TeamName:    task.TeamName,
			TeamID:      task.TeamID,
			Location:    task.Location,
			Language:    task.Language,
			FileName:    task.FileName,
			SourceCode:  string(task.SourceCode),
			PrintTaskID: task.ID,
			TaskState:   state,
		})
	}

	bResp.RespCode = domprinter.RespCodeEnum_Success
	bResp.RespMessage = "Fetch PrintTask Successfully"
	c.JSON(consts.StatusOK, resp)
}

// SubmitPrintTask .
// @router /print-task [POST]
func SubmitPrintTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req domprinter.SubmitPrintTaskReq

	resp := domprinter.NewSubmitPrintTaskResp()
	resp.BaseResp = domprinter.NewBaseResp()
	bResp := resp.BaseResp

	err = c.BindAndValidate(&req)
	if err != nil {
		bResp.RespCode = domprinter.RespCodeEnum_ParamInvalid
		bResp.RespMessage = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	p := req.PrintTask

	submitTime, err := time.Parse(constants.ISO8601TimeFormat, p.SubmitTime)
	if err != nil {
		bResp.RespCode = domprinter.RespCodeEnum_ParamInvalid
		bResp.RespMessage = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	printTaskDAO := orm_gen.PrintTask{
		State:      domprinter.TaskStateEnum_Submitted.String(),
		UserName:   p.UserName,
		TeamName:   p.TeamName,
		TeamID:     p.TeamID,
		Location:   p.Location,
		Language:   p.Language,
		FileName:   p.FileName,
		SourceCode: []byte(p.SourceCode),
		SubmitTime: submitTime,
	}

	err = query.PrintTask.WithContext(ctx).Create(&printTaskDAO)
	if err != nil {
		bResp.RespCode = domprinter.RespCodeEnum_DBErr
		bResp.RespMessage = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.PrintTaskID = printTaskDAO.ID

	state, _ := domprinter.TaskStateEnumFromString(printTaskDAO.State)
	resp.TaskState = state

	bResp.RespCode = domprinter.RespCodeEnum_Success
	bResp.RespMessage = "Submit PrintTask Successfully"
	c.JSON(consts.StatusOK, resp)
}

// UpdatePrintTask .
// @router /print-task [PATCH]
func UpdatePrintTask(ctx context.Context, c *app.RequestContext) {
	var err error
	var req domprinter.UpdatePrintTaskReq

	resp := domprinter.NewUpdatePrintTaskResp()
	resp.BaseResp = domprinter.NewBaseResp()
	bResp := resp.BaseResp

	err = c.BindAndValidate(&req)
	if err != nil {
		bResp.RespCode = domprinter.RespCodeEnum_ParamInvalid
		bResp.RespMessage = err.Error()
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	_, err = query.PrintTask.
		WithContext(ctx).
		Where(query.PrintTask.ID.In(req.PrintTaskIDList...)).
		UpdateColumn(query.Q.PrintTask.State, req.TaskState.String())
	if err != nil {
		bResp.RespCode = domprinter.RespCodeEnum_DBErr
		bResp.RespMessage = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)
	}

	bResp.RespCode = domprinter.RespCodeEnum_Success
	bResp.RespMessage = "Update PrintTask Successfully"
	c.JSON(consts.StatusOK, resp)
}

// Ping .
// @router /ping [GET]
func Ping(ctx context.Context, c *app.RequestContext) {
	var err error
	var req domprinter.PingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(domprinter.PingResp)
	resp.Message = "pong"

	c.JSON(consts.StatusOK, resp)
}
