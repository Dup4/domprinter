// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Dup4/domprinter/biz/model/orm_gen"
)

func newPrintTask(db *gorm.DB, opts ...gen.DOOption) printTask {
	_printTask := printTask{}

	_printTask.printTaskDo.UseDB(db, opts...)
	_printTask.printTaskDo.UseModel(&orm_gen.PrintTask{})

	tableName := _printTask.printTaskDo.TableName()
	_printTask.ALL = field.NewAsterisk(tableName)
	_printTask.ID = field.NewInt64(tableName, "id")
	_printTask.State = field.NewString(tableName, "state")
	_printTask.UserName = field.NewString(tableName, "user_name")
	_printTask.TeamName = field.NewString(tableName, "team_name")
	_printTask.TeamID = field.NewString(tableName, "team_id")
	_printTask.Location = field.NewString(tableName, "location")
	_printTask.Language = field.NewString(tableName, "language")
	_printTask.FileName = field.NewString(tableName, "file_name")
	_printTask.SourceCode = field.NewBytes(tableName, "source_code")
	_printTask.SubmitTime = field.NewTime(tableName, "submit_time")
	_printTask.CreatedAt = field.NewTime(tableName, "created_at")
	_printTask.UpdatedAt = field.NewTime(tableName, "updated_at")
	_printTask.DeletedAt = field.NewField(tableName, "deleted_at")

	_printTask.fillFieldMap()

	return _printTask
}

type printTask struct {
	printTaskDo

	ALL        field.Asterisk
	ID         field.Int64
	State      field.String
	UserName   field.String
	TeamName   field.String
	TeamID     field.String
	Location   field.String
	Language   field.String
	FileName   field.String
	SourceCode field.Bytes
	SubmitTime field.Time
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field

	fieldMap map[string]field.Expr
}

func (p printTask) Table(newTableName string) *printTask {
	p.printTaskDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p printTask) As(alias string) *printTask {
	p.printTaskDo.DO = *(p.printTaskDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *printTask) updateTableName(table string) *printTask {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.State = field.NewString(table, "state")
	p.UserName = field.NewString(table, "user_name")
	p.TeamName = field.NewString(table, "team_name")
	p.TeamID = field.NewString(table, "team_id")
	p.Location = field.NewString(table, "location")
	p.Language = field.NewString(table, "language")
	p.FileName = field.NewString(table, "file_name")
	p.SourceCode = field.NewBytes(table, "source_code")
	p.SubmitTime = field.NewTime(table, "submit_time")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *printTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *printTask) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["state"] = p.State
	p.fieldMap["user_name"] = p.UserName
	p.fieldMap["team_name"] = p.TeamName
	p.fieldMap["team_id"] = p.TeamID
	p.fieldMap["location"] = p.Location
	p.fieldMap["language"] = p.Language
	p.fieldMap["file_name"] = p.FileName
	p.fieldMap["source_code"] = p.SourceCode
	p.fieldMap["submit_time"] = p.SubmitTime
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p printTask) clone(db *gorm.DB) printTask {
	p.printTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p printTask) replaceDB(db *gorm.DB) printTask {
	p.printTaskDo.ReplaceDB(db)
	return p
}

type printTaskDo struct{ gen.DO }

type IPrintTaskDo interface {
	gen.SubQuery
	Debug() IPrintTaskDo
	WithContext(ctx context.Context) IPrintTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPrintTaskDo
	WriteDB() IPrintTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPrintTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPrintTaskDo
	Not(conds ...gen.Condition) IPrintTaskDo
	Or(conds ...gen.Condition) IPrintTaskDo
	Select(conds ...field.Expr) IPrintTaskDo
	Where(conds ...gen.Condition) IPrintTaskDo
	Order(conds ...field.Expr) IPrintTaskDo
	Distinct(cols ...field.Expr) IPrintTaskDo
	Omit(cols ...field.Expr) IPrintTaskDo
	Join(table schema.Tabler, on ...field.Expr) IPrintTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPrintTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPrintTaskDo
	Group(cols ...field.Expr) IPrintTaskDo
	Having(conds ...gen.Condition) IPrintTaskDo
	Limit(limit int) IPrintTaskDo
	Offset(offset int) IPrintTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPrintTaskDo
	Unscoped() IPrintTaskDo
	Create(values ...*orm_gen.PrintTask) error
	CreateInBatches(values []*orm_gen.PrintTask, batchSize int) error
	Save(values ...*orm_gen.PrintTask) error
	First() (*orm_gen.PrintTask, error)
	Take() (*orm_gen.PrintTask, error)
	Last() (*orm_gen.PrintTask, error)
	Find() ([]*orm_gen.PrintTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*orm_gen.PrintTask, err error)
	FindInBatches(result *[]*orm_gen.PrintTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*orm_gen.PrintTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPrintTaskDo
	Assign(attrs ...field.AssignExpr) IPrintTaskDo
	Joins(fields ...field.RelationField) IPrintTaskDo
	Preload(fields ...field.RelationField) IPrintTaskDo
	FirstOrInit() (*orm_gen.PrintTask, error)
	FirstOrCreate() (*orm_gen.PrintTask, error)
	FindByPage(offset int, limit int) (result []*orm_gen.PrintTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPrintTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p printTaskDo) Debug() IPrintTaskDo {
	return p.withDO(p.DO.Debug())
}

func (p printTaskDo) WithContext(ctx context.Context) IPrintTaskDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p printTaskDo) ReadDB() IPrintTaskDo {
	return p.Clauses(dbresolver.Read)
}

func (p printTaskDo) WriteDB() IPrintTaskDo {
	return p.Clauses(dbresolver.Write)
}

func (p printTaskDo) Session(config *gorm.Session) IPrintTaskDo {
	return p.withDO(p.DO.Session(config))
}

func (p printTaskDo) Clauses(conds ...clause.Expression) IPrintTaskDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p printTaskDo) Returning(value interface{}, columns ...string) IPrintTaskDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p printTaskDo) Not(conds ...gen.Condition) IPrintTaskDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p printTaskDo) Or(conds ...gen.Condition) IPrintTaskDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p printTaskDo) Select(conds ...field.Expr) IPrintTaskDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p printTaskDo) Where(conds ...gen.Condition) IPrintTaskDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p printTaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPrintTaskDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p printTaskDo) Order(conds ...field.Expr) IPrintTaskDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p printTaskDo) Distinct(cols ...field.Expr) IPrintTaskDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p printTaskDo) Omit(cols ...field.Expr) IPrintTaskDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p printTaskDo) Join(table schema.Tabler, on ...field.Expr) IPrintTaskDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p printTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPrintTaskDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p printTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IPrintTaskDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p printTaskDo) Group(cols ...field.Expr) IPrintTaskDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p printTaskDo) Having(conds ...gen.Condition) IPrintTaskDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p printTaskDo) Limit(limit int) IPrintTaskDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p printTaskDo) Offset(offset int) IPrintTaskDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p printTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPrintTaskDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p printTaskDo) Unscoped() IPrintTaskDo {
	return p.withDO(p.DO.Unscoped())
}

func (p printTaskDo) Create(values ...*orm_gen.PrintTask) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p printTaskDo) CreateInBatches(values []*orm_gen.PrintTask, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p printTaskDo) Save(values ...*orm_gen.PrintTask) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p printTaskDo) First() (*orm_gen.PrintTask, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.PrintTask), nil
	}
}

func (p printTaskDo) Take() (*orm_gen.PrintTask, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.PrintTask), nil
	}
}

func (p printTaskDo) Last() (*orm_gen.PrintTask, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.PrintTask), nil
	}
}

func (p printTaskDo) Find() ([]*orm_gen.PrintTask, error) {
	result, err := p.DO.Find()
	return result.([]*orm_gen.PrintTask), err
}

func (p printTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*orm_gen.PrintTask, err error) {
	buf := make([]*orm_gen.PrintTask, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p printTaskDo) FindInBatches(result *[]*orm_gen.PrintTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p printTaskDo) Attrs(attrs ...field.AssignExpr) IPrintTaskDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p printTaskDo) Assign(attrs ...field.AssignExpr) IPrintTaskDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p printTaskDo) Joins(fields ...field.RelationField) IPrintTaskDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p printTaskDo) Preload(fields ...field.RelationField) IPrintTaskDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p printTaskDo) FirstOrInit() (*orm_gen.PrintTask, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.PrintTask), nil
	}
}

func (p printTaskDo) FirstOrCreate() (*orm_gen.PrintTask, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*orm_gen.PrintTask), nil
	}
}

func (p printTaskDo) FindByPage(offset int, limit int) (result []*orm_gen.PrintTask, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p printTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p printTaskDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p printTaskDo) Delete(models ...*orm_gen.PrintTask) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *printTaskDo) withDO(do gen.Dao) *printTaskDo {
	p.DO = *do.(*gen.DO)
	return p
}
