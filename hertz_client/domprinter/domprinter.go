// Code generated by thriftgo (0.2.8). DO NOT EDIT.

package domprinter

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type RespCodeEnum int64

const (
	RespCodeEnum_Success      RespCodeEnum = 0
	RespCodeEnum_ParamInvalid RespCodeEnum = 1
	RespCodeEnum_DBErr        RespCodeEnum = 2
)

func (p RespCodeEnum) String() string {
	switch p {
	case RespCodeEnum_Success:
		return "Success"
	case RespCodeEnum_ParamInvalid:
		return "ParamInvalid"
	case RespCodeEnum_DBErr:
		return "DBErr"
	}
	return "<UNSET>"
}

func RespCodeEnumFromString(s string) (RespCodeEnum, error) {
	switch s {
	case "Success":
		return RespCodeEnum_Success, nil
	case "ParamInvalid":
		return RespCodeEnum_ParamInvalid, nil
	case "DBErr":
		return RespCodeEnum_DBErr, nil
	}
	return RespCodeEnum(0), fmt.Errorf("not a valid RespCodeEnum string")
}

func RespCodeEnumPtr(v RespCodeEnum) *RespCodeEnum { return &v }

func (p RespCodeEnum) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RespCodeEnum) UnmarshalText(text []byte) error {
	q, err := RespCodeEnumFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}
func (p *RespCodeEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = RespCodeEnum(result.Int64)
	return
}

func (p *RespCodeEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TaskStateEnum int64

const (
	TaskStateEnum_Unknown   TaskStateEnum = 0
	TaskStateEnum_Submitted TaskStateEnum = 1
	TaskStateEnum_Completed TaskStateEnum = 2
	TaskStateEnum_Abandoned TaskStateEnum = 3
)

func (p TaskStateEnum) String() string {
	switch p {
	case TaskStateEnum_Unknown:
		return "Unknown"
	case TaskStateEnum_Submitted:
		return "Submitted"
	case TaskStateEnum_Completed:
		return "Completed"
	case TaskStateEnum_Abandoned:
		return "Abandoned"
	}
	return "<UNSET>"
}

func TaskStateEnumFromString(s string) (TaskStateEnum, error) {
	switch s {
	case "Unknown":
		return TaskStateEnum_Unknown, nil
	case "Submitted":
		return TaskStateEnum_Submitted, nil
	case "Completed":
		return TaskStateEnum_Completed, nil
	case "Abandoned":
		return TaskStateEnum_Abandoned, nil
	}
	return TaskStateEnum(0), fmt.Errorf("not a valid TaskStateEnum string")
}

func TaskStateEnumPtr(v TaskStateEnum) *TaskStateEnum { return &v }

func (p TaskStateEnum) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TaskStateEnum) UnmarshalText(text []byte) error {
	q, err := TaskStateEnumFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}
func (p *TaskStateEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TaskStateEnum(result.Int64)
	return
}

func (p *TaskStateEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BaseReq struct {
	AuthToken *string `thrift:"AuthToken,1,optional" header:"X-DOM-TOKEN" json:"AuthToken,omitempty"`
}

func NewBaseReq() *BaseReq {
	return &BaseReq{}
}

var BaseReq_AuthToken_DEFAULT string

func (p *BaseReq) GetAuthToken() (v string) {
	if !p.IsSetAuthToken() {
		return BaseReq_AuthToken_DEFAULT
	}
	return *p.AuthToken
}

func (p *BaseReq) IsSetAuthToken() bool {
	return p.AuthToken != nil
}

func (p *BaseReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseReq(%+v)", *p)
}

type BaseResp struct {
	RespCode    RespCodeEnum `thrift:"RespCode,1" form:"RespCode" json:"RespCode" query:"RespCode"`
	RespMessage string       `thrift:"RespMessage,2" form:"RespMessage" json:"RespMessage" query:"RespMessage"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) GetRespCode() (v RespCodeEnum) {
	return p.RespCode
}

func (p *BaseResp) GetRespMessage() (v string) {
	return p.RespMessage
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

type PrintTaskDTO struct {
	SubmitTime  string        `thrift:"SubmitTime,1" form:"SubmitTime" json:"SubmitTime" query:"SubmitTime"`
	UserName    string        `thrift:"UserName,2" form:"UserName" json:"UserName" query:"UserName"`
	TeamName    string        `thrift:"TeamName,3" form:"TeamName" json:"TeamName" query:"TeamName"`
	TeamID      string        `thrift:"TeamID,4" form:"TeamID" json:"TeamID" query:"TeamID"`
	Location    string        `thrift:"Location,5" form:"Location" json:"Location" query:"Location"`
	Language    string        `thrift:"Language,6" form:"Language" json:"Language" query:"Language"`
	FileName    string        `thrift:"FileName,7" form:"FileName" json:"FileName" query:"FileName"`
	SourceCode  string        `thrift:"SourceCode,8" form:"SourceCode" json:"SourceCode" query:"SourceCode"`
	PrintTaskID int64         `thrift:"PrintTaskID,9" form:"PrintTaskID" json:"PrintTaskID" query:"PrintTaskID"`
	TaskState   TaskStateEnum `thrift:"TaskState,10" form:"TaskState" json:"TaskState" query:"TaskState"`
}

func NewPrintTaskDTO() *PrintTaskDTO {
	return &PrintTaskDTO{

		PrintTaskID: 0,
		TaskState:   TaskStateEnum_Unknown,
	}
}

func (p *PrintTaskDTO) GetSubmitTime() (v string) {
	return p.SubmitTime
}

func (p *PrintTaskDTO) GetUserName() (v string) {
	return p.UserName
}

func (p *PrintTaskDTO) GetTeamName() (v string) {
	return p.TeamName
}

func (p *PrintTaskDTO) GetTeamID() (v string) {
	return p.TeamID
}

func (p *PrintTaskDTO) GetLocation() (v string) {
	return p.Location
}

func (p *PrintTaskDTO) GetLanguage() (v string) {
	return p.Language
}

func (p *PrintTaskDTO) GetFileName() (v string) {
	return p.FileName
}

func (p *PrintTaskDTO) GetSourceCode() (v string) {
	return p.SourceCode
}

func (p *PrintTaskDTO) GetPrintTaskID() (v int64) {
	return p.PrintTaskID
}

func (p *PrintTaskDTO) GetTaskState() (v TaskStateEnum) {
	return p.TaskState
}

func (p *PrintTaskDTO) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrintTaskDTO(%+v)", *p)
}

type FetchPrintTaskReq struct {
	TaskState    TaskStateEnum `thrift:"TaskState,1" form:"TaskState" json:"TaskState" query:"TaskState"`
	OffsetTaskID *int64        `thrift:"OffsetTaskID,2,optional" form:"OffsetTaskID" json:"OffsetTaskID,omitempty" query:"OffsetTaskID"`
	LimitTaskNum *int64        `thrift:"LimitTaskNum,3,optional" form:"LimitTaskNum" json:"LimitTaskNum,omitempty" query:"LimitTaskNum"`
	BaseReq      *BaseReq      `thrift:"BaseReq,255" form:"BaseReq" json:"BaseReq" query:"BaseReq"`
}

func NewFetchPrintTaskReq() *FetchPrintTaskReq {
	return &FetchPrintTaskReq{}
}

func (p *FetchPrintTaskReq) GetTaskState() (v TaskStateEnum) {
	return p.TaskState
}

var FetchPrintTaskReq_OffsetTaskID_DEFAULT int64

func (p *FetchPrintTaskReq) GetOffsetTaskID() (v int64) {
	if !p.IsSetOffsetTaskID() {
		return FetchPrintTaskReq_OffsetTaskID_DEFAULT
	}
	return *p.OffsetTaskID
}

var FetchPrintTaskReq_LimitTaskNum_DEFAULT int64

func (p *FetchPrintTaskReq) GetLimitTaskNum() (v int64) {
	if !p.IsSetLimitTaskNum() {
		return FetchPrintTaskReq_LimitTaskNum_DEFAULT
	}
	return *p.LimitTaskNum
}

var FetchPrintTaskReq_BaseReq_DEFAULT *BaseReq

func (p *FetchPrintTaskReq) GetBaseReq() (v *BaseReq) {
	if !p.IsSetBaseReq() {
		return FetchPrintTaskReq_BaseReq_DEFAULT
	}
	return p.BaseReq
}

func (p *FetchPrintTaskReq) IsSetOffsetTaskID() bool {
	return p.OffsetTaskID != nil
}

func (p *FetchPrintTaskReq) IsSetLimitTaskNum() bool {
	return p.LimitTaskNum != nil
}

func (p *FetchPrintTaskReq) IsSetBaseReq() bool {
	return p.BaseReq != nil
}

func (p *FetchPrintTaskReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchPrintTaskReq(%+v)", *p)
}

type FetchPrintTaskResp struct {
	PrintTaskList []*PrintTaskDTO `thrift:"PrintTaskList,1" form:"PrintTaskList" json:"PrintTaskList" query:"PrintTaskList"`
	BaseResp      *BaseResp       `thrift:"BaseResp,255" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewFetchPrintTaskResp() *FetchPrintTaskResp {
	return &FetchPrintTaskResp{}
}

func (p *FetchPrintTaskResp) GetPrintTaskList() (v []*PrintTaskDTO) {
	return p.PrintTaskList
}

var FetchPrintTaskResp_BaseResp_DEFAULT *BaseResp

func (p *FetchPrintTaskResp) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return FetchPrintTaskResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *FetchPrintTaskResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *FetchPrintTaskResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FetchPrintTaskResp(%+v)", *p)
}

type SubmitPrintTaskReq struct {
	PrintTask *PrintTaskDTO `thrift:"PrintTask,1" form:"PrintTask" json:"PrintTask" query:"PrintTask"`
	BaseReq   *BaseReq      `thrift:"BaseReq,255" form:"BaseReq" json:"BaseReq" query:"BaseReq"`
}

func NewSubmitPrintTaskReq() *SubmitPrintTaskReq {
	return &SubmitPrintTaskReq{}
}

var SubmitPrintTaskReq_PrintTask_DEFAULT *PrintTaskDTO

func (p *SubmitPrintTaskReq) GetPrintTask() (v *PrintTaskDTO) {
	if !p.IsSetPrintTask() {
		return SubmitPrintTaskReq_PrintTask_DEFAULT
	}
	return p.PrintTask
}

var SubmitPrintTaskReq_BaseReq_DEFAULT *BaseReq

func (p *SubmitPrintTaskReq) GetBaseReq() (v *BaseReq) {
	if !p.IsSetBaseReq() {
		return SubmitPrintTaskReq_BaseReq_DEFAULT
	}
	return p.BaseReq
}

func (p *SubmitPrintTaskReq) IsSetPrintTask() bool {
	return p.PrintTask != nil
}

func (p *SubmitPrintTaskReq) IsSetBaseReq() bool {
	return p.BaseReq != nil
}

func (p *SubmitPrintTaskReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitPrintTaskReq(%+v)", *p)
}

type SubmitPrintTaskResp struct {
	PrintTaskID int64         `thrift:"PrintTaskID,1" form:"PrintTaskID" json:"PrintTaskID" query:"PrintTaskID"`
	TaskState   TaskStateEnum `thrift:"TaskState,2" form:"TaskState" json:"TaskState" query:"TaskState"`
	BaseResp    *BaseResp     `thrift:"BaseResp,255" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSubmitPrintTaskResp() *SubmitPrintTaskResp {
	return &SubmitPrintTaskResp{

		TaskState: TaskStateEnum_Unknown,
	}
}

func (p *SubmitPrintTaskResp) GetPrintTaskID() (v int64) {
	return p.PrintTaskID
}

func (p *SubmitPrintTaskResp) GetTaskState() (v TaskStateEnum) {
	return p.TaskState
}

var SubmitPrintTaskResp_BaseResp_DEFAULT *BaseResp

func (p *SubmitPrintTaskResp) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return SubmitPrintTaskResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *SubmitPrintTaskResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SubmitPrintTaskResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitPrintTaskResp(%+v)", *p)
}

type UpdatePrintTaskReq struct {
	PrintTaskIDList []int64       `thrift:"PrintTaskIDList,1" form:"PrintTaskIDList" json:"PrintTaskIDList" query:"PrintTaskIDList"`
	TaskState       TaskStateEnum `thrift:"TaskState,2" form:"TaskState" json:"TaskState" query:"TaskState"`
	BaseReq         *BaseReq      `thrift:"BaseReq,255" form:"BaseReq" json:"BaseReq" query:"BaseReq"`
}

func NewUpdatePrintTaskReq() *UpdatePrintTaskReq {
	return &UpdatePrintTaskReq{}
}

func (p *UpdatePrintTaskReq) GetPrintTaskIDList() (v []int64) {
	return p.PrintTaskIDList
}

func (p *UpdatePrintTaskReq) GetTaskState() (v TaskStateEnum) {
	return p.TaskState
}

var UpdatePrintTaskReq_BaseReq_DEFAULT *BaseReq

func (p *UpdatePrintTaskReq) GetBaseReq() (v *BaseReq) {
	if !p.IsSetBaseReq() {
		return UpdatePrintTaskReq_BaseReq_DEFAULT
	}
	return p.BaseReq
}

func (p *UpdatePrintTaskReq) IsSetBaseReq() bool {
	return p.BaseReq != nil
}

func (p *UpdatePrintTaskReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePrintTaskReq(%+v)", *p)
}

type UpdatePrintTaskResp struct {
	BaseResp *BaseResp `thrift:"BaseResp,255" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdatePrintTaskResp() *UpdatePrintTaskResp {
	return &UpdatePrintTaskResp{}
}

var UpdatePrintTaskResp_BaseResp_DEFAULT *BaseResp

func (p *UpdatePrintTaskResp) GetBaseResp() (v *BaseResp) {
	if !p.IsSetBaseResp() {
		return UpdatePrintTaskResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *UpdatePrintTaskResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdatePrintTaskResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePrintTaskResp(%+v)", *p)
}

type PingReq struct {
}

func NewPingReq() *PingReq {
	return &PingReq{}
}

func (p *PingReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingReq(%+v)", *p)
}

type PingResp struct {
	Message string `thrift:"Message,1" form:"Message" json:"Message" query:"Message"`
}

func NewPingResp() *PingResp {
	return &PingResp{}
}

func (p *PingResp) GetMessage() (v string) {
	return p.Message
}

func (p *PingResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingResp(%+v)", *p)
}

type DOMPrinterService interface {
	FetchPrintTask(ctx context.Context, request *FetchPrintTaskReq) (r *FetchPrintTaskResp, err error)

	SubmitPrintTask(ctx context.Context, request *SubmitPrintTaskReq) (r *SubmitPrintTaskResp, err error)

	UpdatePrintTask(ctx context.Context, request *UpdatePrintTaskReq) (r *UpdatePrintTaskResp, err error)

	Ping(ctx context.Context, request *PingReq) (r *PingResp, err error)
}
